package com.developersphere.bechat.persentation.chat_screenimport android.util.Logimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.PaddingValuesimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.imePaddingimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.layout.widthimport androidx.compose.foundation.layout.widthInimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.LazyListStateimport androidx.compose.foundation.lazy.rememberLazyListStateimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.automirrored.filled.ArrowBackimport androidx.compose.material.icons.automirrored.filled.Sendimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.Iconimport androidx.compose.material3.IconButtonimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Scaffoldimport androidx.compose.material3.Surfaceimport androidx.compose.material3.Textimport androidx.compose.material3.TextFieldimport androidx.compose.material3.TextFieldDefaultsimport androidx.compose.material3.TopAppBarimport androidx.compose.material3.TopAppBarColorsimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.collectAsStateimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.saveable.rememberSaveableimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.constraintlayout.compose.ConstraintLayoutimport androidx.constraintlayout.compose.Dimensionimport com.developersphere.bechat.Rimport com.developersphere.bechat.domain.models.Messageimport com.developersphere.bechat.domain.models.MessageStatusimport com.developersphere.bechat.persentation.navigation.Screenimport com.developersphere.bechat.persentation.shared.SharedViewModelimport com.developersphere.bechat.ui.theme.BeChatTheme@Composablefun ChatScreen(    navigation: (Screen?) -> Unit,    sharedViewModel: SharedViewModel,) {    val homeScreenUiState = sharedViewModel.bluetoothUiState.collectAsState()    val messages = homeScreenUiState.value.chatMessages    val listState = rememberLazyListState()    var message by rememberSaveable { mutableStateOf("") }    Scaffold(        topBar = {            ChatScreenTopAppBar(navigation)        },        modifier = Modifier            .fillMaxSize()    ) { innerPadding ->        LaunchedEffect(messages.size) {            if (messages.isNotEmpty()) {                listState.scrollToItem(messages.lastIndex)            }        }        ConstraintLayout(            modifier = Modifier                .padding(innerPadding)                .fillMaxSize()        ) {            val (messageList, messageInput) = createRefs()            // message list            MessageList(                messages = messages,                modifier = Modifier                    .constrainAs(messageList) {                        top.linkTo(parent.top)                        bottom.linkTo(messageInput.top)                        height = Dimension.fillToConstraints                    },                listState = listState,            )            // send msg text field and send icon.            MessageInputBar(                modifier = Modifier                    .fillMaxWidth()                    .padding(12.dp)                    .imePadding()                    .constrainAs(messageInput) {                        bottom.linkTo(parent.bottom)                    },                message = message,                onMessageTextUpdate = {                    message = it                },                onMessageSendClick = {                    if (message.isNotBlank()) {                        sharedViewModel.sendMessage(message)                    }                    message = ""                }            )        }    }}@Composablefun MessageList(    modifier: Modifier, listState: LazyListState,    messages: List<Message>,) {    LazyColumn(        verticalArrangement = Arrangement.spacedBy(8.dp),        modifier = modifier,        state = listState,        contentPadding = PaddingValues(vertical = 8.dp, horizontal = 8.dp),    ) {        items(messages.count()) {            MessageBubble(                messages[it],                messages[it].isSentByUser            )        }    }}@Composablefun MessageInputBar(    modifier: Modifier, message: String,    onMessageTextUpdate: (message: String) -> Unit,    onMessageSendClick: () -> Unit,) {    Row(        modifier = modifier,        verticalAlignment = Alignment.CenterVertically,        horizontalArrangement = Arrangement.SpaceBetween    ) {        TextField(            value = message,            onValueChange = { onMessageTextUpdate(it) },            modifier = Modifier.weight(1f),            colors = TextFieldDefaults.colors(                focusedIndicatorColor = Color.Transparent,                unfocusedIndicatorColor = Color.Transparent,                disabledIndicatorColor = Color.Transparent,                errorIndicatorColor = Color.Transparent,            )        )        Spacer(Modifier.width(8.dp))        IconButton(            onClick = {                onMessageSendClick()            },            modifier = Modifier.size(24.dp)        ) {            Icon(                imageVector = Icons.AutoMirrored.Default.Send,                contentDescription = "send button"            )        }    }}@Composablefun MessageBubble(message: Message, isSentByUser: Boolean = true) {    Row(        horizontalArrangement = if (isSentByUser) Arrangement.End else Arrangement.Start,        modifier = Modifier            .fillMaxSize()            .padding(end = 8.dp)    ) {        Column(            horizontalAlignment = if (message.isSentByUser) Alignment.End            else Alignment.Start        ) {            Surface(                color = if (isSentByUser) MaterialTheme.colorScheme.primaryContainer                else MaterialTheme.colorScheme.primary,                shape = if (isSentByUser) RoundedCornerShape(                    12.dp, 12.dp, 0.dp, 12.dp                ) else RoundedCornerShape(12.dp, 12.dp, 12.dp, 0.dp),                modifier = Modifier.widthIn(max = 250.dp)            ) {                Text(message.message ?: "", modifier = Modifier.padding(12.dp))            }            if (message.status == MessageStatus.FAILED) {                Text("failed to send!", style = TextStyle(color = Color.Red, fontSize = 10.sp))            }        }    }}@OptIn(ExperimentalMaterial3Api::class)@Composablefun ChatScreenTopAppBar(navigation: (Screen?) -> Unit) {    TopAppBar(        colors = TopAppBarColors(            containerColor = MaterialTheme.colorScheme.primaryContainer,            scrolledContainerColor = MaterialTheme.colorScheme.onSurface,            navigationIconContentColor = MaterialTheme.colorScheme.onSurface,            titleContentColor = MaterialTheme.colorScheme.onSurface,            actionIconContentColor = MaterialTheme.colorScheme.onSurface,        ),        title = {            Text(                "Device name",                style = TextStyle(                    color = MaterialTheme.colorScheme.onSurface,                    fontSize = 24.sp                )            )        },        navigationIcon = {            IconButton(onClick = {                navigation.invoke(null)            }) {                Icon(                    imageVector = Icons.AutoMirrored.Default.ArrowBack,                    contentDescription = "",                    tint = MaterialTheme.colorScheme.onSurface,                )            }        },        actions = {            IconButton(                onClick = {}            ) {                Icon(                    painter = painterResource(id = R.drawable.bluetooth),                    contentDescription = "",                    tint = MaterialTheme.colorScheme.onSurface,                )            }        }    )}@Preview@Composablefun ChatScreenPreview() {    BeChatTheme {        ChatScreen(            {},            sharedViewModel = TODO()        )    }}@Preview@Composablefun ChatScreenDarkPreview() {    BeChatTheme(darkTheme = true) {        ChatScreen(            {},            sharedViewModel = TODO()        )    }}